[{"/home/nafees/projects/codebox/client/src/index.js":"1","/home/nafees/projects/codebox/client/src/reportWebVitals.js":"2","/home/nafees/projects/codebox/client/src/components/Homepage.js":"3","/home/nafees/projects/codebox/client/src/components/ModalBox.js":"4","/home/nafees/projects/codebox/client/src/hooks/useLocalStorage.js":"5","/home/nafees/projects/codebox/client/src/CONST/CONSTANTS.js":"6"},{"size":519,"mtime":1618683818553,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1618683818553,"results":"9","hashOfConfig":"8"},{"size":8903,"mtime":1632503765871,"results":"10","hashOfConfig":"8"},{"size":1605,"mtime":1618685646408,"results":"11","hashOfConfig":"8"},{"size":962,"mtime":1618683818553,"results":"12","hashOfConfig":"8"},{"size":94,"mtime":1632503769271,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1seykpa",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nafees/projects/codebox/client/src/index.js",[],["28","29"],"/home/nafees/projects/codebox/client/src/reportWebVitals.js",[],"/home/nafees/projects/codebox/client/src/components/Homepage.js",["30","31","32","33"],"// imports\n// react\nimport React, { useEffect, useState } from 'react'\n// libraries\nimport AceEditor from 'react-ace'\nimport axios from 'axios'\nimport openSocket from 'socket.io-client'\n// ace\nimport 'ace-builds/src-noconflict/mode-python'\nimport 'ace-builds/src-noconflict/mode-c_cpp'\nimport 'ace-builds/src-noconflict/mode-javascript'\nimport 'ace-builds/src-noconflict/ext-language_tools'\nimport 'ace-builds/src-noconflict/theme-cobalt'\n// custom\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport ModalBox from './ModalBox'\n// style\nimport '../fonts/JetBrainsMono[wght].ttf'\nimport './Homepage.css'\n// consts\nimport CONSTANTS from '../CONST/CONSTANTS'\n\n// global vars\nvar languages = ['python', 'c_cpp', 'javascript']\nconst socket = openSocket(CONSTANTS.SERVER_URL)\nconst modes = { javascript: 'js', c_cpp: 'cpp', python: 'py' }\nconst defaultCode = {\n  javascript: \"console.log('hello rce')\",\n  c_cpp:\n    '#include <iostream>\\n\\nint main() {\\n\\tstd::cout << \"hello rce\";\\n\\treturn 0;\\n}',\n  python: \"print('hello rce')\",\n}\n\n// component\nconst Homepage = () => {\n  // cached state vars\n  const [userCode, setUserCode] = useLocalStorage('userCode', '')\n  const [mode, setMode] = useLocalStorage('mode', 'python')\n  const [code, setCode] = useLocalStorage('code', defaultCode[mode])\n  const [input, setInput] = useLocalStorage('input', '')\n  const [joinedSessionCode, setJoinedSessionCode] = useLocalStorage(\n    'joinedSessionCode',\n    ''\n  )\n  // non cached state vars\n  const [output, setOutput] = useState('')\n\n  useEffect(() => {\n    document.onkeydown = (keyDownEvent) => {\n      if (keyDownEvent.altKey && keyDownEvent.key == 'F5')\n        document.getElementById('run-btn').click()\n    }\n  })\n\n  // on load effect\n  useEffect(() => {\n    var now = new Date()\n    var storeTime = JSON.parse(localStorage.getItem('na-rce-storeTime'))\n    if (Math.ceil(Math.abs(now - storeTime) / (1000 * 60 * 60 * 24)) > 1) {\n      setUserCode('')\n      setJoinedSessionCode('')\n      axios\n        .get(CONSTANTS.SERVER_URL+'/code')\n        .then(({ data }) => {\n          setUserCode(data)\n\n          socket.emit('hostSession', {\n            channelID: data,\n          })\n        })\n        .catch((e) => console.log('error', e))\n      localStorage.setItem(\n        'na-rce-storeTime',\n        JSON.stringify(new Date().getTime())\n      )\n    }\n    if (userCode === '') {\n      axios\n        .get(CONSTANTS.SERVER_URL+'/code')\n        .then(({ data }) => {\n          setUserCode(data)\n\n          socket.emit('hostSession', {\n            channelID: data,\n          })\n        })\n        .catch((e) => console.log('error', e))\n    }\n  }, [])\n\n  // on change in [joinedSessionCode] effect\n  useEffect(() => {\n    console.log(joinedSessionCode)\n    socket.emit('joinSession', {\n      channelID: joinedSessionCode,\n    })\n  }, [joinedSessionCode])\n\n  // on change in [code, output, mode, input, userCode, joinedSessionCode] effect\n  useEffect(() => {\n    if (!joinedSessionCode) {\n      socket.emit('realtime', {\n        channelID: userCode,\n        mode,\n        code,\n        input,\n        output,\n      })\n      socket.on('initialLoad', () => {\n        socket.emit('realtime', {\n          channelID: userCode,\n          mode,\n          code,\n          input,\n          output,\n        })\n      })\n    }\n  }, [code, output, mode, input, userCode, joinedSessionCode])\n\n  // on change in [joinedSessionCode] effect\n  useEffect(() => {\n    if (joinedSessionCode) {\n      socket.on('realReceive', (data) => {\n        setMode(data.mode)\n        setInput(data.input)\n        setOutput(data.output)\n        setCode(data.code)\n      })\n    }\n  }, [joinedSessionCode])\n\n  // language select handler\n  const modeHandle = (e) => {\n    setCode(defaultCode[e.target.value])\n    setMode(e.target.value)\n  }\n\n  // code run button handler\n  const handlerun = () => {\n    axios\n      .post(CONSTANTS.SERVER_URL+'/code', {\n        key: userCode,\n        language: modes[mode],\n        input: input,\n        code: code,\n      })\n      .then(({ data }) => {\n        setOutput(data.toString())\n      })\n  }\n\n  // component return\n  return (\n    <>\n      <div className='modal-bg' id='hidden'>\n        <ModalBox\n          userCode={userCode}\n          setJoinedSessionCode={setJoinedSessionCode}\n        />\n      </div>\n      <div className='nav'>\n        <h1 id='brand'>\n          {' '}\n          &gt;codeBox{' '}\n          {joinedSessionCode !== '' ? 'joined: ' + joinedSessionCode : ''}\n        </h1>\n        <div id='navigation'>\n          {joinedSessionCode !== '' ? (\n            <button\n              className='nav-btn'\n              onClick={() => {\n                socket.close()\n                setJoinedSessionCode('')\n                setInput('')\n                setOutput('')\n                setCode(defaultCode[mode])\n                window.location.reload()\n              }}\n            >\n              <h2>disconnect</h2>\n            </button>\n          ) : (\n            <></>\n          )}\n          <button\n            className='nav-btn'\n            onClick={() => {\n              document.getElementsByClassName('modal-bg')[0].id = ''\n            }}\n          >\n            <h2>session</h2>\n          </button>\n          <button\n            className='nav-btn'\n            onClick={() =>\n              window.open(\n                'https://github.com/nafees87n/codebox/blob/main/docs/'\n              )\n            }\n          >\n            <h2>docs</h2>\n          </button>\n          <button\n            className='nav-btn'\n            onClick={() =>\n              window.open('https://github.com/nafees87n/codebox')\n            }\n          >\n            <h2>github</h2>\n          </button>\n        </div>\n      </div>\n      <div className='code-region'>\n        <div id='code-header'>\n          <h2 className='region-title'>code</h2>\n          <h2 className='region-title-divider'>|</h2>\n          {joinedSessionCode === '' ? (\n            <>\n              <select\n                id='language-select'\n                defaultValue={mode}\n                value={mode}\n                onChange={modeHandle}\n              >\n                {languages.map((lang) => {\n                  return (\n                    <option key={lang} value={lang}>\n                      {lang.toUpperCase()}\n                    </option>\n                  )\n                })}\n              </select>\n              <h2 className='region-title-divider'>|</h2>\n              <button id='run-btn' onClick={handlerun}>\n                RUN (ALT + F5)\n              </button>{' '}\n            </>\n          ) : (\n            <>\n              <h2 className='region-title'>{mode}</h2>\n            </>\n          )}\n        </div>\n        <div className='general-editor'>\n          <AceEditor\n            mode={mode}\n            theme='cobalt'\n            height='100%'\n            width='2fr'\n            value={code}\n            fontSize={18}\n            showPrintMargin={false}\n            onChange={(val) => setCode(val)}\n            name='code_editor'\n            setOptions={{\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              enableSnippets: true,\n            }}\n            highlightActiveLine={joinedSessionCode === '' ? true : false}\n            readOnly={joinedSessionCode === '' ? false : true}\n            setOptions={{\n              fontFamily: 'JetBrains Mono',\n            }}\n          />\n        </div>\n      </div>\n      <div className='input-region'>\n        <div id='code-header'>\n          <h2 className='region-title'>input</h2>\n        </div>\n        <div className='general-editor'>\n          <AceEditor\n            mode='text'\n            theme='cobalt'\n            height='100%'\n            width='1fr'\n            value={input}\n            name='input_editor'\n            onChange={(val) => setInput(val)}\n            fontSize={18}\n            showPrintMargin={false}\n            showGutter={false}\n            highlightActiveLine={joinedSessionCode === '' ? true : false}\n            readOnly={joinedSessionCode === '' ? false : true}\n            setOptions={{\n              fontFamily: 'JetBrains Mono',\n            }}\n          />\n        </div>\n      </div>\n      <div className='output-region'>\n        <div id='code-header'>\n          <h2 className='region-title'>output</h2>\n        </div>\n        <div className='general-editor'>\n          <AceEditor\n            mode='text'\n            theme='cobalt'\n            height='100%'\n            width='1fr'\n            value={output}\n            name='output_editor'\n            fontSize={18}\n            showPrintMargin={false}\n            showGutter={false}\n            highlightActiveLine={false}\n            readOnly={true}\n            setOptions={{\n              fontFamily: 'JetBrains Mono',\n            }}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Homepage\n","/home/nafees/projects/codebox/client/src/components/ModalBox.js",[],"/home/nafees/projects/codebox/client/src/hooks/useLocalStorage.js",[],"/home/nafees/projects/codebox/client/src/CONST/CONSTANTS.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":50,"column":51,"nodeType":"40","messageId":"41","endLine":50,"endColumn":53},{"ruleId":"42","severity":1,"message":"43","line":89,"column":6,"nodeType":"44","endLine":89,"endColumn":8,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":131,"column":6,"nodeType":"44","endLine":131,"endColumn":25,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":263,"column":13,"nodeType":"50","endLine":265,"endColumn":15},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setJoinedSessionCode', 'setUserCode', and 'userCode'. Either include them or remove the dependency array.","ArrayExpression",["53"],"React Hook useEffect has missing dependencies: 'setCode', 'setInput', and 'setMode'. Either include them or remove the dependency array.",["54"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Update the dependencies array to be: [setJoinedSessionCode, setUserCode, userCode]",{"range":"59","text":"60"},"Update the dependencies array to be: [joinedSessionCode, setCode, setInput, setMode]",{"range":"61","text":"62"},[2641,2643],"[setJoinedSessionCode, setUserCode, userCode]",[3642,3661],"[joinedSessionCode, setCode, setInput, setMode]"]